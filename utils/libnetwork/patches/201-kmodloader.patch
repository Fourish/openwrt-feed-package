--- a/ns/init_linux.go
+++ b/ns/init_linux.go
@@ -100,10 +100,10 @@ func getSupportedNlFamilies() []int {
 }
 
 func loadXfrmModules() error {
-	if out, err := exec.Command("modprobe", "-va", "xfrm_user").CombinedOutput(); err != nil {
+	if out, err := exec.Command("modprobe", "xfrm_user").CombinedOutput(); err != nil {
 		return fmt.Errorf("Running modprobe xfrm_user failed with message: `%s`, error: %v", strings.TrimSpace(string(out)), err)
 	}
-	if out, err := exec.Command("modprobe", "-va", "xfrm_algo").CombinedOutput(); err != nil {
+	if out, err := exec.Command("modprobe", "xfrm_algo").CombinedOutput(); err != nil {
 		return fmt.Errorf("Running modprobe xfrm_algo failed with message: `%s`, error: %v", strings.TrimSpace(string(out)), err)
 	}
 	return nil
@@ -120,10 +120,10 @@ func checkXfrmSocket() error {
 }
 
 func loadNfConntrackModules() error {
-	if out, err := exec.Command("modprobe", "-va", "nf_conntrack").CombinedOutput(); err != nil {
+	if out, err := exec.Command("modprobe", "nf_conntrack").CombinedOutput(); err != nil {
 		return fmt.Errorf("Running modprobe nf_conntrack failed with message: `%s`, error: %v", strings.TrimSpace(string(out)), err)
 	}
-	if out, err := exec.Command("modprobe", "-va", "nf_conntrack_netlink").CombinedOutput(); err != nil {
+	if out, err := exec.Command("modprobe", "nf_conntrack_netlink").CombinedOutput(); err != nil {
 		return fmt.Errorf("Running modprobe nf_conntrack_netlink failed with message: `%s`, error: %v", strings.TrimSpace(string(out)), err)
 	}
 	return nil
