From 565605fabbbeae8da992059ad61880942e30a177 Mon Sep 17 00:00:00 2001
From: yangfl <yangfl@users.noreply.github.com>
Date: Sun, 12 May 2019 11:53:17 +0800
Subject: [PATCH 12/19] remove x86-specified crc asm

---
 common/cpuid.c  | 12 ++++++++++++
 common/crc32.c  | 16 +++++++++++++++-
 common/crc32c.c | 11 +++++++++--
 3 files changed, 36 insertions(+), 3 deletions(-)

diff --git a/common/cpuid.c b/common/cpuid.c
index beb5620..efc9177 100644
--- a/common/cpuid.c
+++ b/common/cpuid.c
@@ -18,6 +18,7 @@
               2014 Anton Maydell
 */
 
+#if defined(__x86_64__) || defined(__i386__)
 #include <assert.h>
 #include <cpuid.h>
 
@@ -46,3 +47,14 @@ kdb_cpuid_t *kdb_cpuid (void) {
   cached.magic = CPUID_MAGIC;
   return &cached;
 }
+
+#else
+
+#include "cpuid.h"
+
+static kdb_cpuid_t cached = { 0 };
+
+kdb_cpuid_t *kdb_cpuid (void) {
+  return &cached;
+}
+#endif
diff --git a/common/crc32.c b/common/crc32.c
index a7a77fe..cd67ca6 100644
--- a/common/crc32.c
+++ b/common/crc32.c
@@ -425,6 +425,7 @@ unsigned crc32_partial_generic (const void *data, long len, unsigned crc) {
 //mu(65-bit): 01001110000111110010001100110110000010111001010010110001111010101
 #define CRC64_REFLECTED_MU   0x9c3e466c172963d5ll
 
+#if defined(__x86_64__) || defined(__i386__)
 static const char mask[64] __attribute__ ((aligned (64))) = {
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
@@ -538,6 +539,8 @@ unsigned crc32_partial_clmul (const void *data, long len, unsigned crc) {
 #endif
 }
 
+#endif
+
 /******************** CRC-64 ********************/
 
 static const uint64_t crc64_table[256] = {
@@ -622,6 +625,7 @@ uint64_t crc64_partial_one_table (const void *data, long len, uint64_t crc) {
   return crc;
 }
 
+#if defined(__x86_64__) || defined(__i386__)
 static uint64_t crc64_barrett_reduction (v2di D) {
   /* After reflection mu constant is 64 bit */
   v2di E =  __builtin_ia32_pclmulqdq128 (D, CRC64_MU, 0x00);
@@ -664,6 +668,7 @@ uint64_t crc64_partial_clmul (const void *data, long len, uint64_t crc) {
 
   return crc64_barrett_reduction (D);
 }
+#endif
 
 /* {{{ GF-32 */
 
@@ -756,6 +761,7 @@ unsigned gf32_combine_generic (unsigned *powers, unsigned crc1, int64_t len2) {
   return crc1;
 }
 
+#if defined(__x86_64__) || defined(__i386__)
 uint64_t gf32_combine_clmul (unsigned *powers, unsigned crc1, int64_t len2) {
   v2di D;
   FASTMOV_RMI32_TO_SSE(D, crc1);
@@ -780,6 +786,7 @@ uint64_t gf32_combine_clmul (unsigned *powers, unsigned crc1, int64_t len2) {
   D = __builtin_ia32_punpckhqdq128 (D, D);
   RETURN_SSE_UINT64(D);
 }
+#endif
 
 /* }}} */
 
@@ -798,6 +805,7 @@ static unsigned compute_crc32_combine_generic (unsigned crc1, unsigned crc2, int
   #undef N
 }
 
+#if defined(__x86_64__) || defined(__i386__)
 static unsigned compute_crc32_combine_clmul (unsigned crc1, unsigned crc2, int64_t len2) {
   static unsigned int crc32_powers[252] __attribute__ ((aligned(16)));
   if (len2 <= 0) {
@@ -822,6 +830,7 @@ static unsigned compute_crc32_combine_clmul (unsigned crc1, unsigned crc2, int64
   crc2 ^= (unsigned) (T >> 32);
   return (crc32_table0[crc1 & 0xff] ^ crc32_table1[(crc1 & 0xff00) >> 8] ^ crc32_table2[(crc1 & 0xff0000) >> 16] ^ crc32_table[crc1 >> 24]) ^ crc2;
 }
+#endif
 
 /******************** GF-64 (reversed) ********************/
 
@@ -874,6 +883,7 @@ void crc64_init_power_buf (void) {
   assert (crc64_power_buf[125]);
 }
 
+#if defined(__x86_64__) || defined(__i386__)
 static uint64_t compute_crc64_combine_clmul (uint64_t crc1, uint64_t crc2, int64_t len2) {
   if (len2 <= 0) {
     return crc1;
@@ -901,6 +911,7 @@ static uint64_t compute_crc64_combine_clmul (uint64_t crc1, uint64_t crc2, int64
   }
   return crc64_barrett_reduction (D) ^ crc2;
 }
+#endif
 
 static uint64_t compute_crc64_combine_generic (uint64_t crc1, uint64_t crc2, int64_t len2) {
   if (len2 <= 0) {
@@ -1035,13 +1046,16 @@ int crc32_check_and_repair (void *input, int l, unsigned *input_crc32, int force
 
 static void crc32_init (void) __attribute__ ((constructor));
 void crc32_init (void) {
+#if defined(__x86_64__) || defined(__i386__)
   kdb_cpuid_t *p = kdb_cpuid ();
   if (p->ecx & 2) {
     crc32_partial = crc32_partial_clmul;
     crc64_partial = crc64_partial_clmul;
     compute_crc32_combine = compute_crc32_combine_clmul;
     compute_crc64_combine = compute_crc64_combine_clmul;
-  } else {
+  } else
+#endif
+  {
     crc32_partial = crc32_partial_generic;
     crc64_partial = crc64_partial_one_table;
     compute_crc32_combine = compute_crc32_combine_generic;
diff --git a/common/crc32c.c b/common/crc32c.c
index 302d31a..3ced590 100644
--- a/common/crc32c.c
+++ b/common/crc32c.c
@@ -303,6 +303,7 @@ static unsigned crc32c_table0[256] = {
 #define CRC32C_REFLECTED_X8191 0xcdc220ddll
 #define CRC32C_REFLECTED_X16383 0x1acaec54ll
 
+#if defined(__x86_64__) || defined(__i386__)
 #ifdef __LP64__
 static unsigned crc32c_partial_sse42 (const void *data, long len, unsigned crc) {
   const char *p = data;
@@ -560,6 +561,7 @@ static unsigned crc32c_partial_sse42 (const void *data, long len, unsigned crc)
   return crc;
 }
 #endif
+#endif
 
 unsigned crc32c_partial_four_tables (const void *data, long len, unsigned crc) {
   const int *p = (const int *) data;
@@ -614,6 +616,7 @@ static unsigned crc32c_combine_generic (unsigned crc1, unsigned crc2, int64_t le
   return gf32_combine_generic (crc32c_powers, crc1, len2) ^ crc2;
 }
 
+#if defined(__x86_64__) || defined(__i386__)
 static unsigned crc32c_combine_clmul (unsigned crc1, unsigned crc2, int64_t len2) {
   static unsigned int crc32c_powers[252] __attribute__ ((aligned(16)));
   if (len2 <= 0) {
@@ -639,11 +642,13 @@ static unsigned crc32c_combine_clmul (unsigned crc1, unsigned crc2, int64_t len2
   );
   return crc ^ ((unsigned) (T >> 32)) ^ crc2;
 }
+#endif
 
 static void crc32c_init (void) __attribute__ ((constructor));
 void crc32c_init (void) {
-  kdb_cpuid_t *p = kdb_cpuid ();
   compute_crc32c_combine = &crc32c_combine_generic;
+#if defined(__x86_64__) || defined(__i386__)
+  kdb_cpuid_t *p = kdb_cpuid ();
   if (p->ecx & (1 << 20)) {
     crc32c_partial = crc32c_partial_sse42;
 #ifdef __LP64__
@@ -652,7 +657,9 @@ void crc32c_init (void) {
       compute_crc32c_combine = &crc32c_combine_clmul;
     }
 #endif
-  } else {
+  } else
+#endif
+  {
     crc32c_partial = &crc32c_partial_four_tables;
   }
 }
-- 
2.20.1

