#!/bin/sh /etc/rc.common

USE_PROCD=1

START=30
STOP=51

stubby="/usr/sbin/stubby"
stubby_init="/etc/init.d/stubby"
stubby_config_dir="/var/etc/stubby"
stubby_run_dir="/var/run/stubby"
stubby_data_dir="/var/lib/stubby"
stubby_manual_config="/etc/stubby/stubby.yml"

boot() {
	stubby_boot=1
	rc_procd start_service
}

# print_cfg <instance> <yml-opt> <uci-opt> <default-val>
print_cfg() {
	local val
	config_get val "$1" "$3" "$4"
	[ -n "$val" ] && echo "$2: $val"
}

# print_cfg_seq <instance> <yml-opt> <uci-opt> [<default-val>...]
print_cfg_seq() {
	local readonly target="$1"; shift
	local readonly ymlopt="$1"; shift
	local readonly uciopt="$1"; shift
	local head=0
	handle_items() {
		[ "$head" = 0 ] && { echo "$ymlopt:"; head=1; }
		echo "  - $1"
	}
	config_list_foreach "$target" "$uciopt" handle_items
	[ "$head" = 0 ] && for i in "$@"; do handle_items "$i"; done
}

generate_config() {
	# Generate configuration. See: https://github.com/getdnsapi/stubby/blob/develop/stubby.yml.example
	echo "# Autogenerated configuration from uci data"
	echo "resolution_type: GETDNS_RESOLUTION_STUB"

	print_cfg "$1" "tls_query_padding_blocksize" "tls_query_padding_blocksize" 128
	print_cfg "$1" "edns_client_subnet_private" "edns_client_subnet_private" 1
	print_cfg "$1" "round_robin_upstreams" "round_robin_upstreams" 1
	print_cfg "$1" "idle_timeout" "idle_timeout" 10000
	print_cfg "$1" "tls_connection_retries" "tls_connection_retries" 2
	print_cfg "$1" "tls_backoff_time" "tls_backoff_time" 3600
	print_cfg "$1" "tls_ca_path" "tls_ca_path"
	print_cfg "$1" "limit_outstanding_queries" "limit_outstanding_queries" 0
	print_cfg "$1" "timeout" "timeout" 5000
	print_cfg "$1" "tls_cipher_list" "tls_cipher_list"
	print_cfg "$1" "tls_ciphersuites" "tls_ciphersuites"
	print_cfg "$1" "appdata_dir" "appdata_dir" "$stubby_data_dir"
	print_cfg "$1" "trust_anchors_backoff_time" "trust_anchors_backoff_time" 2500

	print_cfg_seq "$1" "dns_transport_list" "dns_transport"
	print_cfg_seq "$1" "listen_addresses" "listen_address"
	print_cfg_seq "$1" "dnssec_trust_anchors" "dnssec_trust_anchors"

	local tls_auth tls_min tls_max dnssec

	config_get_bool tls_auth "$1" "tls_authentication" 1
	echo -n "tls_authentication: "
	[ "$tls_auth" = "1" ] && echo "GETDNS_AUTHENTICATION_REQUIRED" || echo "GETDNS_AUTHENTICATION_NONE"

	config_get tls_min "$1" "tls_min_version" ""
	[ -n "$tls_min" ] && echo "tls_min_version: GETDNS_TLS${tls_min/\./_}"
	config_get tls_max "$1" "tls_max_version" ""
	[ -n "$tls_max" ] && echo "tls_max_version: GETDNS_TLS${tls_max/\./_}"

	config_get_bool dnssec "$1" "dnssec_return_status" 0
	config_get_bool dnssec "$1" "dnssec" "$dnssec"
	echo -n "dnssec: "
	[ "$dnssec" = "1" ] && echo "GETDNS_EXTENSION_TRUE" || echo "GETDNS_EXTENSION_FALSE"

	local resolver_head=0
	print_resolver() {
		[ "$resolver_head" = 0 ] && { echo "upstream_recursive_servers:"; resolver_head=1; }

		echo "  -"
		print_cfg "$1" "    address_data" "address"
		print_cfg "$1" "    port" "port"
		print_cfg "$1" "    tls_port" "tls_port"
		print_cfg "$1" "    tls_auth_name" "tls_auth_name"
		print_cfg "$1" "    tls_cipher_list" "tls_cipher_list"
		print_cfg "$1" "    tls_ciphersuites" "tls_ciphersuites"

		local tls_min tls_max
		config_get tls_min "$1" "tls_min_version" ""
		[ -n "$tls_min" ] && echo "    tls_min_version: GETDNS_TLS${tls_min/\./_}"
		config_get tls_max "$1" "tls_max_version" ""
		[ -n "$tls_max" ] && echo "    tls_max_version: GETDNS_TLS${tls_max/\./_}"

		local resolver_spki_head=0
		print_resolver_spki() {
			local readonly digest="${1%%/*}"
			local readonly value="${1#*/}"
			[ "$resolver_spki_head" = 0 ] && { echo "tls_pubkey_pinset:"; resolver_spki_head=1; }
			echo "      -"
			echo "        digest: \"$digest\""
			echo "        value: $value"
		}
		config_list_foreach "$1" "spki" print_resolver_spki
	}
	config_list_foreach "$1" "resolver" print_resolver
	[ "$resolver_head" = 0 ] && config_foreach print_resolver "resolver"
}

stubby_start() {
	local disable
	config_get_bool disable "$1" "disable" 0
	[ "$disable" = 1 ] && return

	if [ "$stubby_boot" = 1 ]; then
		local trig_timed trig_other
		handle_triggers() { [ "$1" = "timed" ] && trig_timed=1 || trig_other=1; }
		config_list_foreach "$1" "trigger" handle_triggers
		[ "$trig_timed" != 1 ] && [ "$trig_other" = 1 ] && return
	fi

	local readonly cfg="$stubby_config_dir/$1.yml"
	local manual config_file
	config_get_bool manual "$1" "manual" 0
	if [ "$manual" = 1 ]; then
		config_get config_file "$1" "config_file" "$stubby_manual_config"
		cp -Lf "$config_file" "$cfg"
	else
		generate_config "$1" >"$cfg.tmp"
		mv -f "$cfg.tmp" "$cfg"
	fi
	chown stubby:stubby "$cfg"
	chmod 0400 "$cfg"

	procd_open_instance "$1"
	procd_set_param "command" "$stubby" -C "$cfg"

	local loglevel
	config_get loglevel "$1" "log_level" ""
	if [ -n "$loglevel" ]; then
		procd_append_param "command" -v "$loglevel"
	fi

	procd_set_param respawn 3600 3 -1
	procd_set_param file "$cfg"
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param pidfile "$stubby_run_dir/$1.pid"
	procd_set_param user stubby
	procd_close_instance
}

stubby_load_config() {
	local find="$1"
	local found

	if [ -z "$find" ]; then
		config_load "stubby"
		return 1
	fi

	config_cb() {
		if [ "$1" = "stubby" ] && [ "$2" = "$find" ]; then
			found=1
		fi
	}
	config_load "stubby"
	reset_cb
	[ "$found" = 1 ] && return 0 || return 1
}

start_service() {
	mkdir -p -m 0750 "$stubby_config_dir" "$stubby_run_dir" "$stubby_data_dir"
	chown -h stubby:stubby "$stubby_config_dir" "$stubby_run_dir" "$stubby_data_dir"

	if stubby_load_config "$1"; then
		stubby_start "$1"
	else
		config_foreach stubby_start "stubby"
	fi
}

stubby_add_trigger() {
	local disable
	config_get_bool disable "$1" "disable" 0
	[ "$disable" = 1 ] && return

	handle_triggers() {
		[ "$1" = "timed" ] && return
		local delay
		config_get delay "$section" "triggerdelay" 2
		export PROCD_RELOAD_DELAY=$(($delay * 1000))
		procd_add_interface_trigger "interface.*.up" "$1" "$stubby_init" "restart" "$section"
	}
	config_list_foreach "$1" "trigger" handle_triggers
}

service_triggers() {
	procd_add_reload_trigger "stubby"
	config_foreach stubby_add_trigger "stubby"
}
