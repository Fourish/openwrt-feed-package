#!/bin/sh /etc/rc.common
#
# Copyright (C) 2022 Thomas Cuj√©
#
# This is free software, licensed under the GNU General Public License v2.
# See /LICENSE for more information.
#

# shellcheck disable=SC2034
START=99
STOP=01
USE_PROCD=1

_log() {
  logger -p daemon.info -t sshuttle "$@"
}

_err() {
	logger -p daemon.err -t sshuttle "$@"
}

append_params() {
  for p in "$@"; do
    eval "v=\$$p"
    for v in $v; do
      if [ -n "$v" ] && [ "$v" != "no" ]; then
        if [ "$p" = "subnets" ]; then
          args="$args $v"
        elif [ "$p" = "method" ]; then
          set -- "$@" "--method" "$v"
        else
          p="--$( echo "$p" | sed -e 's|_|-|g' )"
          if [ "$v" = "yes" ]; then
            args="$args $p"
          elif [ "$v" != "no" ]; then
            args="$args $p=$v"
          fi
        fi
      fi
    done
  done

  ARGS="${args# *}"
}

validate_gateway_section() {
  uci_load_validate sshuttle gateway "$1" "$2" \
    'listen:string' \
    'subnets:list(string)' \
    'method:or("auto", "nat", "nft", "tproxy", "pf", "ipfw")' \
    'auto_hosts:or("yes", "no")' \
    'auto_nets:or("yes", "no")' \
    'dns:or("yes", "no")' \
    'ns_hosts:list(host)' \
    'to_ns:host' \
    'python:string' \
    'exclude_subnet:list(string)' \
    'exclude_file:file' \
    'verbose:or("yes", "no")' \
    'ssh_cmd:string' \
    'seed_hosts:list(host)' \
    'latency_control:or("yes", "no")' \
    'latency_buffer_size:integer' \
    'subnets_file:file' \
    'syslog:or("yes", "no")' \
    'disable_ipv6:or("yes", "no")' \
    'mark:string'
}

load_gateway() {
  gateway="$1"

  [ "$2" = 0 ] || { _err "gateway $gateway: validation failed"; return 1; }

  append_params listen subnets method auto_hosts auto_nets dns ns_hosts to_ns \
    python exclude_subnet exclude_file verbose ssh_cmd seed_hosts latency_control \
    latency_buffer_size subnets_file syslog disable_ipv6 mark

  ARGS="--remote=$1 --pidfile=/var/run/sshuttle.$1.pid $ARGS"
  _log "Using sshuttle instance $gateway with args: $ARGS"

  procd_open_instance "$gateway"
  procd_set_param command "/usr/bin/sshuttle" $ARGS
  procd_set_param stdout 1
  procd_set_param stderr 1
  procd_set_param respawn 0 60 1
  procd_close_instance
}

service_triggers() {
  procd_add_reload_trigger "sshuttle"

  procd_open_validate
  validate_gateway_section "$@"
  procd_close_validate
}

start_service() {
  _log "Starting sshuttle instances"
  config_load "sshuttle"
  config_foreach validate_gateway_section "gateway" load_gateway
}
